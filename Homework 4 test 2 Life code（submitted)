
// Title: Complimentary Contrast
// Author: Jeremy Rotsztain
// Course: ShaderArt (DIGF-3011, Winter 2022)
// Ediet & rewrite: Doris Gao

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_mouse;
uniform vec2 u_resolution;
uniform float u_time;

// map()
// maps from one range of values to another 
// with linear interpolation
// like processing/p5.js map()
// by Rick Companje

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

// calculateHueLerp()
// select a color from a collection of 6 based on a percentage
// interpolate between colors
// returns a RGB color

vec3 calculateHueLerp(vec3 colors[14], float pct){

    pct = mod( pct, 1.0);
    float stepSize = 0.0833;
    
    vec3 result = colors[0];
    
    if( pct < 0.0714 ){

        pct = map( pct, 0.0, 0.0714, 0.0, 1.0);
        result = mix( colors[0], colors[1], pct);

    } else if( pct < 0.1428){

        pct = map( pct, 0.0714, 0.1428, 0.0, 1.0);
        result = mix( colors[1], colors[2], pct);

    } else if( pct < 0.2142){

        pct = map( pct, 0.1428, 0.2142, 0.0, 1.0);
        result = mix( colors[2], colors[3], pct);

    } else if( pct < 0.2857){

        pct = map( pct, 0.2142, 0.2857, 0.0, 1.0);
        result = mix( colors[3], colors[4], pct);

    } else if( pct < 0.3571){

        pct = map( pct, 0.2857, 0.3571, 0.0, 1.0);
        result = mix( colors[4], colors[5], pct);
        
    } else if( pct < 0.4286){
        
        pct = map( pct, 0.3571, 0.4286, 0.0, 1.0);
        result = mix( colors[5], colors[6], pct);
        
    } else if( pct < 0.5){
        
        pct = map( pct, 0.4286, 0.5, 0.0, 1.0);
        result = mix( colors[6], colors[7], pct);
        
    } else if( pct < 0.5714){
        
        pct = map( pct, 0.5, 0.5714, 0.0, 1.0);
        result = mix( colors[7], colors[8], pct);
        
    } else if( pct < 0.6428){
        
        pct = map( pct, 0.5714, 0.6428, 0.0, 1.0);
        result = mix( colors[8], colors[9], pct);
        
    } else if( pct < 0.7143){

        pct = map( pct, 0.6428, 0.7143, 0.0, 1.0);
        result = mix( colors[9], colors[10], pct);
        
     } else if( pct < 0.7857){

        pct = map( pct, 0.7143, 0.7857, 0.0, 1.0);
        result = mix( colors[10], colors[11], pct);
        
      } else if( pct < 0.8571){

        pct = map( pct, 0.7857, 0.8571, 0.0, 1.0);
        result = mix( colors[11], colors[12], pct);
        
      } else if( pct < 0.9286){

        pct = map( pct, 0.8571, 0.9286, 0.0, 1.0);
        result = mix( colors[12], colors[13], pct);
        
      } else {

        pct = map( pct, 0.9286, 1.0, 0.0, 1.0);
        result = mix( colors[13], colors[0], pct);
    }

    return result;
}

// rgb_normalize()
// set colors using integers 
// range [0, 255]
// by Jeremy Rotsztain

vec3 rgb_normalize( int r, int g, int b){
    
    return vec3(float(r)/255., float(g)/255., float(b)/255.);
}

// hsb2rgb()
// HSV to RGB conversion
// By IQ

vec3 hsb2rgb( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

	return c.z * mix( vec3(1.0), rgb, c.y);
}

// calculate the hue
// based on time, fract to keep in [0,1] range
// by Jeremy Rotsztain

float hue = fract(u_time * 0.1);


void main (void) {

    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    vec2 st0 = st;

    // colors selected manually in photoshop
    vec3 colors[14];
    colors[0] = rgb_normalize(246,150,121); // light red
    colors[1] = rgb_normalize(249,173,129); // light orange
    colors[2] = rgb_normalize(253,198,137); // orange-yellow
    colors[3] = rgb_normalize(255,247,153); // light yellow
    colors[4] = rgb_normalize(196,223,155); // light green
    colors[5] = rgb_normalize(163,211,156); // green
    colors[6] = rgb_normalize(130,202,156); // grass green
    colors[7] = rgb_normalize(122,204,200); // green-blue
    colors[8] = rgb_normalize(109,207,246); // light blue
    colors[9] = rgb_normalize(125,167,217); // blue
    colors[10] = rgb_normalize(131,147,202); // purple-blue
    colors[11] = rgb_normalize(135,129,189); // purple
    colors[12] = rgb_normalize(189,140,191);//purple-pink
    colors[13] = rgb_normalize(244,154,193);//pink
    
	//store color in vec3
    vec3 color = vec3(0);

    // divide the canvas into 4 sections
    // invert the order for legibility
    float row = 1.0 - st.y;
    row = floor( row * 4.0);
    
    if( row == 0.0){
        
        float corner1 = hue+0.0;
        color = calculateHueLerp(colors, corner1);
        
        vec3 orange = calculateHueLerp(colors, corner1);
        vec3 yellow = calculateHueLerp(colors, corner1+0.219); 
        
        float lerp = floor(st.x*5.)/4.;
        
        color = mix( orange, yellow, lerp);
        
    } else if (row == 1.){
        
        float corner2 = hue+0.249;
        color = calculateHueLerp(colors, corner2);
        
        vec3 yellow = calculateHueLerp(colors, corner2); 
        vec3 green = calculateHueLerp(colors, corner2+0.3); 
        
        float lerp = floor(st.x*5.)/4.;
        
        color = mix( green, yellow, lerp);
       
    } else if (row == 2.){
        
        float corner3 = hue+0.589;
        color = calculateHueLerp(colors, corner3);
        
        vec3 purple = calculateHueLerp(colors, corner3+0.221); 
        vec3 blue = calculateHueLerp(colors, corner3); 
        
        float lerp = floor(st.x*5.)/4.;
        
        color = mix( blue, purple, lerp);
        
    } else if (row == 3.){
        
        float corner4 = hue+0.83;
        color = calculateHueLerp(colors, corner4);
        
        vec3 purple = calculateHueLerp(colors, corner4); 
        vec3 red = calculateHueLerp(colors, corner4-0.819); 
        
        float lerp = floor(st.x*5.)/4.;
        
        color = mix( red , purple, lerp);  
        
    }

    
    gl_FragColor = vec4(color,1.0);
}
