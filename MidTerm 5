// Author @patriciogv - 2015
// http://patriciogonzalezvivo.com/
//edit:Doris Gao

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

// calculateHueLerp()
// select a color from a collection of 6 based on a percentage
// interpolate between colors
// returns a RGB color

vec3 calculateHueLerp(vec3 colors[14], float pct){

    pct = mod( pct, 1.0);
    float stepSize = 0.0833;
    
    vec3 result = colors[0];
    
    if( pct < 0.0714 ){

        pct = map( pct, 0.0, 0.0714, 0.0, 1.0);
        result = mix( colors[0], colors[1], pct);

    } else if( pct < 0.1428){

        pct = map( pct, 0.0714, 0.1428, 0.0, 1.0);
        result = mix( colors[1], colors[2], pct);

    } else if( pct < 0.2142){

        pct = map( pct, 0.1428, 0.2142, 0.0, 1.0);
        result = mix( colors[2], colors[3], pct);

    } else if( pct < 0.2857){

        pct = map( pct, 0.2142, 0.2857, 0.0, 1.0);
        result = mix( colors[3], colors[4], pct);

    } else if( pct < 0.3571){

        pct = map( pct, 0.2857, 0.3571, 0.0, 1.0);
        result = mix( colors[4], colors[5], pct);
        
    } else if( pct < 0.4286){
        
        pct = map( pct, 0.3571, 0.4286, 0.0, 1.0);
        result = mix( colors[5], colors[6], pct);
        
    } else if( pct < 0.5){
        
        pct = map( pct, 0.4286, 0.5, 0.0, 1.0);
        result = mix( colors[6], colors[7], pct);
        
    } else if( pct < 0.5714){
        
        pct = map( pct, 0.5, 0.5714, 0.0, 1.0);
        result = mix( colors[7], colors[8], pct);
        
    } else if( pct < 0.6428){
        
        pct = map( pct, 0.5714, 0.6428, 0.0, 1.0);
        result = mix( colors[8], colors[9], pct);
        
    } else if( pct < 0.7143){

        pct = map( pct, 0.6428, 0.7143, 0.0, 1.0);
        result = mix( colors[9], colors[10], pct);
        
     } else if( pct < 0.7857){

        pct = map( pct, 0.7143, 0.7857, 0.0, 1.0);
        result = mix( colors[10], colors[11], pct);
        
      } else if( pct < 0.8571){

        pct = map( pct, 0.7857, 0.8571, 0.0, 1.0);
        result = mix( colors[11], colors[12], pct);
        
      } else if( pct < 0.9286){

        pct = map( pct, 0.8571, 0.9286, 0.0, 1.0);
        result = mix( colors[12], colors[13], pct);
        
      } else {

        pct = map( pct, 0.9286, 1.0, 0.0, 1.0);
        result = mix( colors[13], colors[0], pct);
    }

    return result;
}

// rgb_normalize()
// set colors using integers 
// range [0, 255]
// by Jeremy Rotsztain

vec3 rgb_normalize( int r, int g, int b){
    
    return vec3(float(r)/255., float(g)/255., float(b)/255.);
}

// hsb2rgb()
// HSV to RGB conversion
// By IQ

vec3 hsb2rgb( in vec3 c )
{
    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );

	return c.z * mix( vec3(1.0), rgb, c.y);
}

// calculate the hue
// based on time, fract to keep in [0,1] range
// by Jeremy Rotsztain

float hue = fract(u_time * 0.1);
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

vec3 doAnimation0(){
    return vec3(0.);
}

void main(){
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    vec2 st0 = st;
    
    vec3 colors[14];
    colors[0] = rgb_normalize(246,150,121); // light red
    colors[1] = rgb_normalize(249,173,129); // light orange
    colors[2] = rgb_normalize(253,198,137); // orange-yellow
    colors[3] = rgb_normalize(255,247,153); // light yellow
    colors[4] = rgb_normalize(196,223,155); // light green
    colors[5] = rgb_normalize(163,211,156); // green
    colors[6] = rgb_normalize(130,202,156); // grass green
    colors[7] = rgb_normalize(122,204,200); // green-blue
    colors[8] = rgb_normalize(109,207,246); // light blue
    colors[9] = rgb_normalize(125,167,217); // blue
    colors[10] = rgb_normalize(131,147,202); // purple-blue
    colors[11] = rgb_normalize(135,129,189); // purple
    colors[12] = rgb_normalize(189,140,191);//purple-pink
    colors[13] = rgb_normalize(244,154,193);//pink
    vec3 color = vec3(0.0);

    // bottom-left
    vec2 bl = smoothstep(0.3,abs(sin(u_time)),st);
    //vec2 bl = smoothstep(0.1,0.5,st);
    float pct = bl.x * bl.y;

    // top-right
    vec2 tr = smoothstep(0.1,abs(sin(u_time)),1.0-st);
    pct *= tr.x * tr.y;

    float row = 1.0 - st.y;
    row = floor( row * 4.0);
    
	float corner = hue+0.83;
    color = calculateHueLerp(colors, corner);
    float corner2 = hue+0.249;
    color = calculateHueLerp(colors, corner2);
        
    vec3 purple = calculateHueLerp(colors, corner); 
    vec3 red = calculateHueLerp(colors, corner-0.819); 
    vec3 yellow = calculateHueLerp(colors, corner2); 
    vec3 green = calculateHueLerp(colors, corner2+0.3);
    
    float t1 = mod(u_time*0.05, 6.);
    float t2 = floor(t1);
    float t3 = mod(u_time, 20.);
    float t4 = mod(u_time + 100., u_time + 200.);
	if (t1 == 0.){
        color = doAnimation0(); 
    } else if (t2 == 1.0) {
        vec2 noiseInput = vec2(st.x*t3, 2.);
    	float n = snoise( noiseInput )*0.5 + 0.5 ;
        color = mix( red , purple, step( pct, n)); 
    } else if (t2 == 2.0){
        vec2 noiseInput = vec2(st.x*t4, 2.);
    	float n = snoise( noiseInput )*0.5 + 0.5 ;
        color = mix( red , purple, step( pct, n));
    } else if (t2 == 3.0) {
        vec2 noiseInput = vec2(st.x*t3, 2.);
    	float n = snoise( noiseInput )*0.5 + 0.5 ;
        pct = distance(st,step(vec2(0.5),st));
        color = mix( red , purple, step( pct, n));
    } else if (t2 == 4.0){
        vec2 noiseInput = vec2(st.x*t4, 2.);
    	float n = snoise( noiseInput )*0.5 + 0.5 ;
        pct = distance(st,step(vec2(0.5),st));
        color = mix( red , purple, step( pct, n));
    } else {
        st *= 3.0;
        st = fract(st);
        color = mix(yellow,green,vec3(st,t2));
    }
       

    gl_FragColor = vec4(color,1.0);
}
